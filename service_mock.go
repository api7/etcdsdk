// Code generated by MockGen. DO NOT EDIT.
// Source: ./types.go

// Package sdk is a generated GoMock package.
package etcdsdk

import (
	context "context"
	reflect "reflect"

	db "github.com/api7/dashboard/pkg/db"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of SDK interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockService) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockServiceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockService)(nil).Close))
}

// New mocks base method.
func (m *MockService) New() Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New")
	ret0, _ := ret[0].(Query)
	return ret0
}

// New indicates an expected call of New.
func (mr *MockServiceMockRecorder) New() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockService)(nil).New))
}

// MockQuery is a mock of Query interface.
type MockQuery struct {
	ctrl     *gomock.Controller
	recorder *MockQueryMockRecorder
}

// MockQueryMockRecorder is the mock recorder for MockQuery.
type MockQueryMockRecorder struct {
	mock *MockQuery
}

// NewMockQuery creates a new mock instance.
func NewMockQuery(ctrl *gomock.Controller) *MockQuery {
	mock := &MockQuery{ctrl: ctrl}
	mock.recorder = &MockQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuery) EXPECT() *MockQueryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockQuery) Create(ctx context.Context, key string, obj interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, key, obj)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockQueryMockRecorder) Create(ctx, key, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockQuery)(nil).Create), ctx, key, obj)
}

// Delete mocks base method.
func (m *MockQuery) Delete(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockQueryMockRecorder) Delete(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockQuery)(nil).Delete), ctx, key)
}

// Filter mocks base method.
func (m *MockQuery) Filter(filter filterFunc) Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filter", filter)
	ret0, _ := ret[0].(Query)
	return ret0
}

// Filter indicates an expected call of Filter.
func (mr *MockQueryMockRecorder) Filter(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockQuery)(nil).Filter), filter)
}

// Format mocks base method.
func (m *MockQuery) Format(format formatFunc) Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Format", format)
	ret0, _ := ret[0].(Query)
	return ret0
}

// Format indicates an expected call of Format.
func (mr *MockQueryMockRecorder) Format(format interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Format", reflect.TypeOf((*MockQuery)(nil).Format), format)
}

// Get mocks base method.
func (m *MockQuery) Get(ctx context.Context, key string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockQueryMockRecorder) Get(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockQuery)(nil).Get), ctx, key)
}

// GetResourcePrefix mocks base method.
func (m *MockQuery) GetResourcePrefix() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourcePrefix")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetResourcePrefix indicates an expected call of GetResourcePrefix.
func (mr *MockQueryMockRecorder) GetResourcePrefix() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcePrefix", reflect.TypeOf((*MockQuery)(nil).GetResourcePrefix))
}

// Hook mocks base method.
func (m *MockQuery) Hook(hook Hook) Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hook", hook)
	ret0, _ := ret[0].(Query)
	return ret0
}

// Hook indicates an expected call of Hook.
func (mr *MockQueryMockRecorder) Hook(hook interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hook", reflect.TypeOf((*MockQuery)(nil).Hook), hook)
}

// List mocks base method.
func (m *MockQuery) List(ctx context.Context, opts ...db.Option) (*ListOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*ListOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockQueryMockRecorder) List(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockQuery)(nil).List), varargs...)
}

// Page mocks base method.
func (m *MockQuery) Page(page int) Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Page", page)
	ret0, _ := ret[0].(Query)
	return ret0
}

// Page indicates an expected call of Page.
func (mr *MockQueryMockRecorder) Page(page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Page", reflect.TypeOf((*MockQuery)(nil).Page), page)
}

// PageSize mocks base method.
func (m *MockQuery) PageSize(pageSize int) Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PageSize", pageSize)
	ret0, _ := ret[0].(Query)
	return ret0
}

// PageSize indicates an expected call of PageSize.
func (mr *MockQueryMockRecorder) PageSize(pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PageSize", reflect.TypeOf((*MockQuery)(nil).PageSize), pageSize)
}

// Patch mocks base method.
func (m *MockQuery) Patch(ctx context.Context, key string, obj interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Patch", ctx, key, obj)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockQueryMockRecorder) Patch(ctx, key, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockQuery)(nil).Patch), ctx, key, obj)
}

// Prefix mocks base method.
func (m *MockQuery) Prefix(prefix string) Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prefix", prefix)
	ret0, _ := ret[0].(Query)
	return ret0
}

// Prefix indicates an expected call of Prefix.
func (mr *MockQueryMockRecorder) Prefix(prefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prefix", reflect.TypeOf((*MockQuery)(nil).Prefix), prefix)
}

// Sort mocks base method.
func (m *MockQuery) Sort(sort sortFunc) Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sort", sort)
	ret0, _ := ret[0].(Query)
	return ret0
}

// Sort indicates an expected call of Sort.
func (mr *MockQueryMockRecorder) Sort(sort interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sort", reflect.TypeOf((*MockQuery)(nil).Sort), sort)
}

// Type mocks base method.
func (m *MockQuery) Type(typ reflect.Type) Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type", typ)
	ret0, _ := ret[0].(Query)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockQueryMockRecorder) Type(typ interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockQuery)(nil).Type), typ)
}

// Update mocks base method.
func (m *MockQuery) Update(ctx context.Context, key string, obj interface{}, createIfNotExist bool) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, key, obj, createIfNotExist)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockQueryMockRecorder) Update(ctx, key, obj, createIfNotExist interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockQuery)(nil).Update), ctx, key, obj, createIfNotExist)
}

// MockPrefixer is a mock of Prefixer interface.
type MockPrefixer struct {
	ctrl     *gomock.Controller
	recorder *MockPrefixerMockRecorder
}

// MockPrefixerMockRecorder is the mock recorder for MockPrefixer.
type MockPrefixerMockRecorder struct {
	mock *MockPrefixer
}

// NewMockPrefixer creates a new mock instance.
func NewMockPrefixer(ctrl *gomock.Controller) *MockPrefixer {
	mock := &MockPrefixer{ctrl: ctrl}
	mock.recorder = &MockPrefixerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrefixer) EXPECT() *MockPrefixerMockRecorder {
	return m.recorder
}

// KeyPrefix mocks base method.
func (m *MockPrefixer) KeyPrefix() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeyPrefix")
	ret0, _ := ret[0].(string)
	return ret0
}

// KeyPrefix indicates an expected call of KeyPrefix.
func (mr *MockPrefixerMockRecorder) KeyPrefix() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyPrefix", reflect.TypeOf((*MockPrefixer)(nil).KeyPrefix))
}
